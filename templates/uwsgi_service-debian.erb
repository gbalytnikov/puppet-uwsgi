#!/bin/bash
### BEGIN INIT INFO
# Provides:          uwsgi
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop uWSGI server instance(s)
# Description:       This script manages uWSGI server instance(s).
#                    You could control specific instance(s) by issuing:
#                    
#                        service uwsgi <command> <confname> <confname> ...
#                    
#                    You can issue to init.d script following commands:
#                      * start        | starts daemon
#                      * stop         | stops daemon
#                      * reload       | sends to daemon SIGHUP signal
#                      * restart      | issues 'stop', then 'start' commands
#                      * status       | shows status of daemon instance
#                    
#                    'status' command must be issued with exactly one
#                    argument: '<confname>'.
#                    
#                    In init.d script output:
#                      * . -- command was executed without problems or instance
#                             is already in needed state
#                      * ! -- command failed (or executed with some problems)
#                      * ? -- configuration file for this instance isn't found
#                             and this instance is ignored
#                    
### END INIT INFO

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="app server(s)"
NAME="uwsgi"
DAEMON="/usr/local/bin/uwsgi"
SCRIPTNAME="/etc/init.d/${NAME}"

UWSGI_CONFDIR="<%= @app_directory %>"

PIDFILE="<%= @pidfile %>"
UWSGI_RUNDIR="${PIDFILE%/*}"
UWSGI_LOGDIR="<%= @log_file %>%/*"

DAEMON_OPTS="--ini "<%= @config_file %>" "

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Create directory if not created
[ -d "$UWSGI_CONFDIR" ] || mkdir -p $UWSGI_CONFDIR
[ -d "$UWSGI_RUNDIR" ] || mkdir -p $UWSGI_RUNDIR
[ -d "$UWSGI_LOGDIR" ] || mkdir -p $UWSGI_LOGDIR

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# This is shell script, (indirectly) sourced by uWSGI init.d script
# Return:
#  0 if daemon has been started
#  1 if daemon was already running
#  2 if daemon could not be started
do_start()
{
    local CONFFILE=<%= @config_file %>
    if [ ! -s "$CONFFILE" ]; then
        return 2
    fi

    install -d -o root -g root -m 755 "${UWSGI_RUNDIR}"

    start-stop-daemon --start --quiet \
        --pidfile "$PIDFILE" \
        --exec "$DAEMON" \
        --test > /dev/null \
        || return 1

    start-stop-daemon --start --quiet \
        --pidfile $PIDFILE \
        --exec $DAEMON -- $DAEMON_OPTS > /dev/null \
        || return 2

    sleep 2
    chown root:root "$PIDFILE"
    chmod 644 "$PIDFILE"

    start-stop-daemon --start --quiet \
        --pidfile "$PIDFILE" \
        --exec "$DAEMON" \
        --test > /dev/null \
        && return 2

    return 0
}

# Return:
#  0 if daemon has been stopped
#  1 if daemon was already stopped
#  2 if daemon could not be stopped
#  other if a failure occurred
do_stop()
{
    start-stop-daemon --stop --quiet \
        --retry=QUIT/30/KILL/5 \
        --pidfile "$PIDFILE" \
        --name "$NAME"

      RETVAL="$?"
      [ "$RETVAL" = 2 ] && return 2

      return "$RETVAL"
}

# Return:
#  0 if daemon has been reloaded
#  3 if daemon could not be reloaded
do_reload()
{
    start-stop-daemon --stop --quiet \
        --signal=HUP \
        --pidfile "$PIDFILE" \
        --name "$NAME"

    RETVAL="$?"

    # There is no such process, nothing to reload!
    [ "$RETVAL" = 1 ] && RETVAL=3

    return "$RETVAL"
}

WHAT=$1
case "$WHAT" in
    start)
        log_daemon_msg "Starting $DESC" "$NAME"
        do_"$WHAT"
        RETVAL="$?"
        log_end_msg "$RETVAL"
    ;;

    stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        do_"$WHAT"
        RETVAL="$?"
        log_end_msg "$RETVAL"
    ;;

    status)
        status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME" \
            && exit 0 \
            || exit $?
    ;;

    reload)
        log_daemon_msg "Reloading $DESC" "$NAME"
        do_"$WHAT"
        RETVAL="$?"
        log_end_msg "$RETVAL"
    ;;

    restart)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
            0)
                do_start
                RETVAL="$?"
                log_end_msg "$RETVAL"
            ;;
            *)
                # Failed to stop
                log_end_msg 1
            ;;
        esac
      ;;

    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload}" >&2
        exit 3
    ;;
esac
